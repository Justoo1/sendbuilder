# Generated by Django 5.2 on 2025-10-30 09:45

import builder.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icons/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('study_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('study_number', models.CharField(max_length=200)),
                ('study_sponsor', models.CharField(max_length=200)),
                ('study_type', models.CharField(max_length=200)),
                ('species', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField()),
                ('status', models.CharField(default='Draft', max_length=200)),
                ('completed', models.BooleanField(default=False)),
                ('study_file', models.FileField(blank=True, null=True, upload_to=builder.models.study_file_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Study',
                'verbose_name_plural': 'Studies',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('TOXICOLOGIST', 'Toxicologist'), ('SEND_EXPERT', 'SEND Expert'), ('QC_REVIEWER', 'QC Reviewer')], default='TOXICOLOGIST', help_text='User role for workflow access control', max_length=20)),
                ('email', models.EmailField(help_text='Required for workflow notifications', max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Optional contact phone number', max_length=20, null=True)),
                ('department', models.CharField(blank=True, help_text='Department or team', max_length=100, null=True)),
                ('specialization', models.CharField(blank=True, help_text='Area of expertise (e.g., Cardiotoxicity, SEND Implementation)', max_length=200, null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Whether user is available for new assignments')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DomainDetectionPrompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('prompt', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.domain')),
            ],
            options={
                'verbose_name': 'Domain Detection Prompt',
                'verbose_name_plural': 'Domain Detection Prompts',
            },
        ),
        migrations.CreateModel(
            name='DomainExtractionPrompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('prompt', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.domain')),
            ],
            options={
                'verbose_name': 'Domain Extraction Prompt',
                'verbose_name_plural': 'Domain Extraction Prompts',
            },
        ),
        migrations.CreateModel(
            name='FDAFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('file', models.FileField(blank=True, null=True, upload_to='fda_files/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.study')),
            ],
            options={
                'verbose_name': 'FDA File',
                'verbose_name_plural': 'FDA Files',
            },
        ),
        migrations.CreateModel(
            name='ExtractedDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.JSONField()),
                ('xpt_file', models.FileField(blank=True, null=True, upload_to=builder.models.xpt_file_path)),
                ('csv_file', models.FileField(blank=True, null=True, upload_to=builder.models.xpt_file_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.domain')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.study')),
            ],
            options={
                'verbose_name': 'Extracted Domain',
                'verbose_name_plural': 'Extracted Domains',
            },
        ),
        migrations.CreateModel(
            name='DocumentUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('original_filename', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_size', models.BigIntegerField()),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='builder.study')),
            ],
        ),
        migrations.CreateModel(
            name='DetectedDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_id', models.JSONField()),
                ('page', models.JSONField()),
                ('confident_score', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.domain')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.study')),
            ],
            options={
                'verbose_name': 'Deetected Domain',
                'verbose_name_plural': 'Deetected Domains',
            },
        ),
        migrations.CreateModel(
            name='StudyContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('page', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.study')),
            ],
            options={
                'verbose_name': 'Study Content',
                'verbose_name_plural': 'Study Contents',
            },
        ),
        migrations.CreateModel(
            name='StudySubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_id', models.CharField(help_text='Unique submission identifier', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('UPLOADED', 'Uploaded'), ('AI_PROCESSING', 'AI Processing'), ('TOXICOLOGIST_REVIEW', 'Toxicologist Review'), ('SEND_EXPERT_REVIEW', 'SEND Expert Review'), ('QC_REVIEW', 'QC Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='UPLOADED', help_text='Current workflow status', max_length=30)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('ai_processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('ai_processing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('tox_review_started_at', models.DateTimeField(blank=True, null=True)),
                ('tox_review_completed_at', models.DateTimeField(blank=True, null=True)),
                ('send_review_started_at', models.DateTimeField(blank=True, null=True)),
                ('send_review_completed_at', models.DateTimeField(blank=True, null=True)),
                ('qc_review_started_at', models.DateTimeField(blank=True, null=True)),
                ('qc_review_completed_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejected_at', models.DateTimeField(blank=True, null=True)),
                ('priority', models.IntegerField(default=3, help_text='Priority level (1=Critical, 5=Low)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if status is REJECTED', null=True)),
                ('notes', models.TextField(blank=True, help_text='General notes about the submission', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_qc_reviewer', models.ForeignKey(blank=True, help_text='Assigned QC reviewer for final quality check', limit_choices_to={'role': 'QC_REVIEWER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='qc_reviews', to=settings.AUTH_USER_MODEL)),
                ('assigned_send_expert', models.ForeignKey(blank=True, help_text='Assigned SEND expert for compliance review', limit_choices_to={'role': 'SEND_EXPERT'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='send_reviews', to=settings.AUTH_USER_MODEL)),
                ('assigned_toxicologist', models.ForeignKey(blank=True, help_text='Assigned toxicologist for scientific review', limit_choices_to={'role': 'TOXICOLOGIST'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tox_reviews', to=settings.AUTH_USER_MODEL)),
                ('study', models.OneToOneField(help_text='Linked study instance', on_delete=django.db.models.deletion.CASCADE, related_name='submission', to='builder.study')),
            ],
            options={
                'verbose_name': 'Study Submission',
                'verbose_name_plural': 'Study Submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(blank=True, help_text='SEND domain code if comment is domain-specific', max_length=2, null=True)),
                ('variable', models.CharField(blank=True, help_text='SEND variable name if comment is field-specific', max_length=8, null=True)),
                ('comment', models.TextField(help_text='Review comment or feedback')),
                ('severity', models.CharField(choices=[('CRITICAL', 'Critical - Must Fix'), ('MAJOR', 'Major - Should Fix'), ('MINOR', 'Minor - Optional'), ('INFO', 'Informational')], default='MINOR', help_text='Severity level of the issue', max_length=10)),
                ('resolved', models.BooleanField(default=False, help_text='Whether issue has been resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='Timestamp of resolution', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how issue was resolved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved the issue', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments_resolved', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(help_text='User who made the comment', on_delete=django.db.models.deletion.CASCADE, related_name='comments_made', to=settings.AUTH_USER_MODEL)),
                ('submission', models.ForeignKey(help_text='Linked study submission', on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to='builder.studysubmission')),
            ],
            options={
                'verbose_name': 'Review Comment',
                'verbose_name_plural': 'Review Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExtractedField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(help_text='SEND domain code (e.g., DM, BW, LB)', max_length=2)),
                ('variable', models.CharField(help_text='SEND variable name (e.g., STUDYID, USUBJID)', max_length=8)),
                ('value', models.CharField(help_text='Extracted value', max_length=200)),
                ('original_value', models.CharField(blank=True, help_text='Original AI-extracted value before any corrections', max_length=200, null=True)),
                ('confidence_score', models.FloatField(help_text='AI confidence score (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('requires_review', models.BooleanField(default=False, help_text='Flagged for human review if confidence < 0.85')),
                ('reviewed', models.BooleanField(default=False, help_text='Whether field has been reviewed by human')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Timestamp of review', null=True)),
                ('is_corrected', models.BooleanField(default=False, help_text='Whether field was corrected from original extraction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this field', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_fields', to=settings.AUTH_USER_MODEL)),
                ('submission', models.ForeignKey(help_text='Linked study submission', on_delete=django.db.models.deletion.CASCADE, related_name='extracted_fields', to='builder.studysubmission')),
            ],
            options={
                'verbose_name': 'Extracted Field',
                'verbose_name_plural': 'Extracted Fields',
                'ordering': ['domain', 'variable'],
            },
        ),
        migrations.CreateModel(
            name='DataProvenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(help_text='SEND domain code', max_length=2)),
                ('variable', models.CharField(help_text='SEND variable name', max_length=8)),
                ('value', models.TextField(help_text='Extracted data value')),
                ('pdf_page', models.IntegerField(help_text='PDF page number where data was found')),
                ('pdf_table', models.CharField(blank=True, help_text='Table identifier or caption', max_length=100, null=True)),
                ('pdf_row', models.IntegerField(blank=True, help_text='Row number within table', null=True)),
                ('pdf_column', models.CharField(blank=True, help_text='Column identifier or header', max_length=50, null=True)),
                ('pdf_coordinates', models.JSONField(blank=True, help_text='Bounding box coordinates in PDF (x, y, width, height)', null=True)),
                ('extraction_method', models.CharField(choices=[('AI', 'AI Extraction'), ('MANUAL', 'Manual Entry'), ('CORRECTED', 'AI + Human Correction')], default='AI', help_text='Method used to extract this data', max_length=10)),
                ('extracted_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of extraction')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Timestamp of review', null=True)),
                ('source_text', models.TextField(blank=True, help_text='Surrounding text context from PDF', null=True)),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence score if applicable', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('extracted_by', models.ForeignKey(blank=True, help_text='User who extracted/entered the data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extracted_data', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_provenance', to=settings.AUTH_USER_MODEL)),
                ('submission', models.ForeignKey(help_text='Linked study submission', on_delete=django.db.models.deletion.CASCADE, related_name='provenance_records', to='builder.studysubmission')),
            ],
            options={
                'verbose_name': 'Data Provenance',
                'verbose_name_plural': 'Data Provenance Records',
                'ordering': ['pdf_page', 'pdf_table', 'pdf_row'],
            },
        ),
        migrations.CreateModel(
            name='AICorrection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(help_text='SEND domain code', max_length=2)),
                ('variable', models.CharField(help_text='SEND variable name', max_length=8)),
                ('original_extraction', models.TextField(help_text='Original AI-extracted value')),
                ('corrected_value', models.TextField(help_text='Human-corrected value')),
                ('correction_reason', models.TextField(help_text='Reason for correction and guidance for AI')),
                ('correction_type', models.CharField(help_text='Type of correction (e.g., format, value, unit, missing data)', max_length=50)),
                ('added_to_training', models.BooleanField(default=False, help_text='Whether correction has been exported to training dataset')),
                ('training_export_date', models.DateTimeField(blank=True, help_text='Date correction was exported for training', null=True)),
                ('ai_confidence_before', models.FloatField(blank=True, help_text='AI confidence score before correction', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('corrected_by', models.ForeignKey(help_text='User who made the correction', on_delete=django.db.models.deletion.CASCADE, related_name='corrections_made', to=settings.AUTH_USER_MODEL)),
                ('submission', models.ForeignKey(help_text='Linked study submission', on_delete=django.db.models.deletion.CASCADE, related_name='ai_corrections', to='builder.studysubmission')),
            ],
            options={
                'verbose_name': 'AI Correction',
                'verbose_name_plural': 'AI Corrections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='studysubmission',
            index=models.Index(fields=['status', 'priority'], name='builder_stu_status_6b14e7_idx'),
        ),
        migrations.AddIndex(
            model_name='studysubmission',
            index=models.Index(fields=['submission_id'], name='builder_stu_submiss_53b4ac_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['submission', 'resolved'], name='builder_rev_submiss_d84cc3_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['severity', 'resolved'], name='builder_rev_severit_bb5b77_idx'),
        ),
        migrations.AddIndex(
            model_name='extractedfield',
            index=models.Index(fields=['submission', 'domain'], name='builder_ext_submiss_e37c2c_idx'),
        ),
        migrations.AddIndex(
            model_name='extractedfield',
            index=models.Index(fields=['requires_review'], name='builder_ext_require_8aac6f_idx'),
        ),
        migrations.AddIndex(
            model_name='extractedfield',
            index=models.Index(fields=['confidence_score'], name='builder_ext_confide_930d8b_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprovenance',
            index=models.Index(fields=['submission', 'domain'], name='builder_dat_submiss_7b88e8_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprovenance',
            index=models.Index(fields=['pdf_page'], name='builder_dat_pdf_pag_f396a3_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprovenance',
            index=models.Index(fields=['extraction_method'], name='builder_dat_extract_e16d68_idx'),
        ),
        migrations.AddIndex(
            model_name='aicorrection',
            index=models.Index(fields=['domain', 'variable'], name='builder_aic_domain_552fd9_idx'),
        ),
        migrations.AddIndex(
            model_name='aicorrection',
            index=models.Index(fields=['added_to_training'], name='builder_aic_added_t_8101b2_idx'),
        ),
        migrations.AddIndex(
            model_name='aicorrection',
            index=models.Index(fields=['correction_type'], name='builder_aic_correct_df8180_idx'),
        ),
    ]
